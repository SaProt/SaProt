import torchfrom transformers import EsmTokenizerfrom ..model_interface import register_modelfrom .esm_lm_model import EsmLMModelfrom utils.constants import foldseek_seq_vocab, foldseek_struc_vocab, create_vocab@register_modelclass EsmFoldseekModel(EsmLMModel):	def __init__(self, mode: str, **kwargs):		assert mode in ["foldseek", "vqvae"]		self.mode = mode		super().__init__(**kwargs)		def initialize_model(self):		super().initialize_model()		self.vocab = self.tokenizer.get_vocab()		if self.mode == "foldseek":			self.struc_dict = {i: t for i, t in enumerate(foldseek_struc_vocab)}		else:			size = int((len(self.vocab) - 5) / 21)			self.struc_dict = create_vocab(size)		# Sum probabilities of tokens with the same amino acid	def sum_seq_prob(self, pred_prob: torch.Tensor) -> torch.Tensor:		"""				Args:			pred_prob: [N, vocab_size]		Returns:			seq_prob:   [N, 20]		"""				seq_prob = torch.zeros(pred_prob.shape[0], 20, device=pred_prob.device)				for i, aa in enumerate(foldseek_seq_vocab[:20]):			# Get start index of the amino acid in the structure vocabulary			st = self.vocab[aa + self.struc_dict[0]]			seq_prob[..., i] = pred_prob[..., st: st+len(self.struc_dict)].sum(-1)				return seq_prob	# Sum probabilities of tokens with the same structure	def sum_struc_prob(self, pred_prob: torch.Tensor) -> torch.Tensor:		"""		Args:			pred_prob: [N, vocab_size]		Returns:			struc_prob:   [N, struc_vocab_size]		"""		struc_prob = torch.zeros(pred_prob.shape[0], len(self.struc_dict), device=pred_prob.device)		for i, struc_token in enumerate(self.struc_dict):			token = [aa + struc_token for aa in foldseek_seq_vocab]			ids = self.tokenizer.convert_tokens_to_ids(token)			struc_prob[..., i] = pred_prob[..., ids].sum(-1)		return struc_prob		# Get all structure probabilities given an amino acid at a position	def get_struc_prob(self, pred_prob: torch.Tensor, aa: str, pos: int) -> torch.Tensor:		"""				Args:			pred_prob: [N, vocab_size]			aa:        Amino acid			pos:       Position of the amino acid		Returns:			struc_prob:   [N, struc_vocab_size]		"""				aa_st = self.vocab[aa + self.struc_dict[0]]		return pred_prob[pos, aa_st: aa_st+len(self.struc_dict)]	